<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.oseasy.initiate.modules.excellent.dao.ExcellentShowDao">

	<sql id="excellentShowColumns">
		a.id AS "id",
		a.cover_img AS "coverImg",
		a.type AS "type",
		a.foreign_id AS "foreignId",
		a.content AS "content",
		a.is_release AS
		"isRelease",
		a.is_top AS "isTop",
		a.is_comment AS "isComment",
		a.views AS
		"views",
		a.likes AS "likes",
		a.comments AS "comments",
		a.update_date AS
		"updateDate",
		a.update_by AS "updateBy.id",
		a.create_date AS
		"createDate",
		a.create_by AS "createBy.id",
		a.del_flag AS "delFlag",
		a.release_date AS "releaseDate"
	</sql>

	<sql id="excellentShowJoins">
	</sql>

	<select id="get" resultType="ExcellentShow">
		SELECT
		<include refid="excellentShowColumns" />
		FROM excellent_show a
		<include refid="excellentShowJoins" />
		WHERE a.id = #{id}
	</select>

	<select id="findList" resultType="ExcellentShow">
		SELECT
		<include refid="excellentShowColumns" />
		FROM excellent_show a
		<include refid="excellentShowJoins" />
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>

	<select id="findAllList" resultType="ExcellentShow">
		SELECT
		<include refid="excellentShowColumns" />
		FROM excellent_show a
		<include refid="excellentShowJoins" />
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>

	<insert id="insert">
		INSERT INTO excellent_show(
		id,
		cover_img,
		type,
		foreign_id,
		content,
		is_release,
		is_top,
		is_comment,
		update_date,
		update_by,
		create_date,
		create_by,
		del_flag,
		release_date
		) VALUES (
		#{id},
		#{coverImg},
		#{type},
		#{foreignId},
		#{content},
		#{isRelease},
		#{isTop},
		#{isComment},
		#{updateDate},
		#{updateBy.id},
		#{createDate},
		#{createBy.id},
		#{delFlag},
		#{releaseDate}
		)
	</insert>

	<update id="update">
		UPDATE excellent_show SET
		cover_img = #{coverImg},
		type = #{type},
		foreign_id = #{foreignId},
		content = #{content},
		is_release = #{isRelease},
		is_top = #{isTop},
		is_comment = #{isComment},
		update_date =
		#{updateDate},
		update_by = #{updateBy.id},
		release_date=#{releaseDate}
		WHERE id = #{id}
	</update>

	<update id="delete">
		UPDATE excellent_show SET
		del_flag =
		#{DEL_FLAG_DELETE}
		WHERE id = #{id}
	</update>

	<select id="findAllProjectShow" resultType="java.util.HashMap" parameterType="java.util.Map">
		select 	m.id,m.type,m.coverImg,m.officeId,m.leaderId,m.likes,m.views,m.comments,m.is_release,
		m.name,m.introduction,m.is_top,m.update_date
		from (
		select
		t.id,t.type,t.cover_img coverImg,t.likes,t.views,t.comments,t.is_release,p.name,
		p.org_id officeId,p.leader leaderId,p.introduction,t.is_top,t.update_date  from
		excellent_show t
		left join project_declare p on p.id=t.foreign_id
		where
		t.del_flag='0' and t.type='0000000075'
		UNION
		select
		t.id,t.type,t.cover_img coverImg,t.likes,t.views,t.comments,t.is_release,p.p_name name,
		p.university_id officeId,p.declare_id leaderId,p.introduction ,t.is_top,t.update_date from excellent_show t
		left join g_contest p on
		p.id=t.foreign_id
		where t.del_flag='0' and t.type='0000000076'
		) as m
		left JOIN sys_user u on m.leaderId=u.id
		left join sys_office f on u.office_Id=f.id
		where 1=1
		<if test="type != null and type !=''">
			AND m.type =#{type}
		</if>
			AND m.is_release ='1'
		<if test="key != null and key !=''">
			AND (m.name like CONCAT('%',#{key},'%')
				or f.name like CONCAT('%',#{key},'%')
				or u.name like CONCAT('%',#{key},'%')
			)
		</if>
		order by m.is_top desc,m.update_date desc
		limit #{offset},#{pageSize}
	</select>

	<select id="findAllProjectShowCount" resultType="java.lang.Integer" parameterType="java.util.Map">
		select count(1)
		from (
		select
		t.id,t.type,t.cover_img coverImg,t.likes,t.views,t.comments,t.is_release,p.name,
		p.org_id officeId,p.introduction,t.is_top,t.update_date  from
		excellent_show t
		left join project_declare p on p.id=t.foreign_id
		where
		t.del_flag='0' and t.type='0000000075'
		UNION
		select
		t.id,t.type,t.cover_img coverImg,t.likes,t.views,t.comments,t.is_release,p.p_name name,
		p.university_id officeId,p.introduction ,t.is_top,t.update_date from excellent_show t
		left join g_contest p on
		p.id=t.foreign_id
		where t.del_flag='0' and t.type='0000000076'
		) as m
		where 1=1	AND m.is_release ='1'
		<if test="type != null and type !=''">
			AND m.type =#{type}
		</if>

	</select>

	<select id="findProjectForIndex" resultType="java.util.Map">
		select
		t.id,t.cover_img coverImg,t.likes,t.views,t.comments,p.name,p.introduction from
		excellent_show t
		left join project_declare p on p.id=t.foreign_id
		where
		t.del_flag='0' and t.type='0000000075' AND t.is_release ='1'
		order by t.is_top desc,t.update_date desc
		limit 3
	</select>
	<select id="findGcontestForIndex" resultType="java.util.Map">
		select
		t.id,t.cover_img coverImg,t.likes,t.views,t.comments,p.p_name
		name,p.introduction from excellent_show t
		left join g_contest p on
		p.id=t.foreign_id
		where t.del_flag='0' and t.type='0000000076' AND t.is_release ='1'
		order by t.is_top
		desc,t.update_date desc limit 3
	</select>


	<select id="getProjectInfo" resultType="java.util.Map">
		select
		t.id,t.name,o.name
		oname,u.name lname
		from project_declare t
		left join sys_user u on
		t.leader=u.id
		left
		join
		sys_office o on u.office_id=o.id
		where
		t.id=#{projectId}
	</select>
	<select id="getProjectTeacherInfo" resultType="java.util.Map">
		select u.name
		uname,o.name oname,e.post_title from project_declare t
		left join
		team_user_relation s on s.user_type='2' and s.del_flag='0' and
		s.state='0' and t.team_id=s.team_id
		left join sys_user u on
		s.user_id=u.id
		left join sys_office o on u.office_id=o.id
		left join
		sys_teacher_expansion e on u.id=e.user_id
		where t.id=#{projectId}
	</select>
	<select id="getGcontestInfo" resultType="java.util.Map">
		select
		t.id,t.p_name
		name,o.name oname,u.name lname from g_contest t
		left join sys_user u on
		t.declare_id=u.id
		left join sys_office o on u.office_id=o.id
		where
		t.id=#{gcontestId}
	</select>
	<select id="getGcontestTeacherInfo" resultType="java.util.Map">
		select u.name
		uname,o.name oname,e.post_title from g_contest t
		left join
		team_user_relation s on s.user_type='2' and s.del_flag='0' and
		s.state='0' and t.team_id=s.team_id
		left join sys_user u on
		s.user_id=u.id
		left join sys_office o on u.office_id=o.id
		left join
		sys_teacher_expansion e on u.id=e.user_id
		where t.id=#{gcontestId}
	</select>
	<select id="getByForid" resultType="ExcellentShow">
		SELECT
		<include refid="excellentShowColumns" />
		FROM excellent_show a
		where a.del_flag='0' and a.foreign_id=#{id}
	</select>
	<update id="updateComments" parameterType="java.util.Map">
		UPDATE excellent_show SET comments = CASE id
		<foreach collection="param.keys" item="key" separator=" ">
			WHEN #{key} THEN ifnull(comments,0)+#{param[${key}]}
		</foreach>
		END
		where id in 
		<foreach collection="param.keys" item="key" open="(" separator="," close=")">
			#{key}
		</foreach>
	</update>
	<update id="updateViews" parameterType="java.util.Map">
		UPDATE excellent_show SET views = CASE id
		<foreach collection="param.keys" item="key" separator=" ">
			WHEN #{key} THEN ifnull(views,0)+#{param[${key}]}
		</foreach>
		END
		where id in 
		<foreach collection="param.keys" item="key" open="(" separator="," close=")">
			#{key}
		</foreach>
	</update>
	<update id="updateLikes" parameterType="java.util.Map">
		UPDATE excellent_show SET likes = CASE id
		<foreach collection="param.keys" item="key" separator=" ">
			WHEN #{key} THEN ifnull(likes,0)+#{param[${key}]}
		</foreach>
		END
		where id in 
		<foreach collection="param.keys" item="key" open="(" separator="," close=")">
			#{key}
		</foreach>
	</update>
</mapper>