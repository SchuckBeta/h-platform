<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-4.1.xsd"
	default-lazy-init="true">

	<description>Jedis Configuration</description>

    <!-- 加载配置属性文件 -->
	<context:property-placeholder ignore-unresolvable="true" location="classpath:initiate.properties" />

	<!-- redis 单机连接方案 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">

		<property name="maxIdle" value="3000" /> <!-- 最大能够保持idel状态的对象数  -->
		<property name="maxTotal" value="60000" /> <!-- 最大分配的对象数 -->
		<property name="testOnBorrow" value="true" /> <!-- 当调用borrow Object方法时，是否进行有效性检查 -->
	</bean>

	<bean id="jedisPool" class="redis.clients.jedis.JedisPool">
		<constructor-arg index="0" ref="jedisPoolConfig" />
		<constructor-arg index="1" value="${redis.host}" />
		<constructor-arg index="2" value="${redis.port}" type="int" />
		<!-- <constructor-arg index="3" value="${redis.timeout}" type="int" />
		<constructor-arg index="4" value="${redis.password}"/>
		<constructor-arg index="5" value="${redis.database}" type="int" />
		<constructor-arg index="6" value="${redis.clientName}"/> -->
	</bean>
	<!-- redis 单机连接方案   end-->

	<!-- Redis集群配置 -->
		<!--<bean id="redisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
	        <property name="maxTotal" value="3000" />
	        <property name="maxIdle" value="60000" />
	        <property name="maxWaitMillis" value="300000" />
	        <property name="testOnBorrow" value="true" />
	    </bean>

	     <bean id="redisClusterConfig" class="org.springframework.data.redis.connection.RedisClusterConfiguration">
	        <property name="maxRedirects" value="3"></property>
	        <property name="clusterNodes">
	            <set>
	                <bean class="org.springframework.data.redis.connection.RedisNode">
	                    <constructor-arg name="host" value="127.0.0.1"></constructor-arg>
	                    <constructor-arg name="port" value="7000"></constructor-arg>
	                </bean>

	                <bean class="org.springframework.data.redis.connection.RedisNode">
	                    <constructor-arg name="host" value="127.0.0.1"></constructor-arg>
	                    <constructor-arg name="port" value="7004"></constructor-arg>
	                </bean>
	                <bean class="org.springframework.data.redis.connection.RedisNode">
	                    <constructor-arg name="host" value="127.0.0.1"></constructor-arg>
	                    <constructor-arg name="port" value="7005"></constructor-arg>
	                </bean>
	            </set>
	        </property>
	    </bean>

		<bean id="redis4CacheConnectionFactory"
	        class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
	        <constructor-arg name="clusterConfig" ref="redisClusterConfig" />
	        <property name="timeout" value="300000" />
	        <property name="poolConfig" ref="redisPoolConfig" />
	    </bean>

	&lt;!&ndash; 存储序列化 &ndash;&gt;
	    <bean name="stringRedisSerializer"
	        class="org.springframework.data.redis.serializer.StringRedisSerializer" />

	    &lt;!&ndash; 集群Resis使用模板 &ndash;&gt;
	    <bean id="clusterRedisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
	        <property name="connectionFactory" ref="redis4CacheConnectionFactory" />
	        <property name="keySerializer" ref="stringRedisSerializer" />
	        <property name="hashKeySerializer" ref="stringRedisSerializer" />
	        <property name="valueSerializer" ref="stringRedisSerializer" />
	        <property name="hashValueSerializer" ref="stringRedisSerializer" />
	    </bean>-->
	<!-- Redis集群配置  end-->


</beans>