<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.oseasy.initiate.modules.project.dao.ProjectDeclareDao">

	<sql id="projectDeclareColumns">
		a.id AS "id",
		a.org_id AS "orgId",
		a.plan_content AS
		"planContent",
		a.plan_start_date AS "planStartDate",
		a.plan_end_date AS
		"planEndDate",
		a.plan_step AS "planStep",
		a.result_type AS "resultType",
		a.result_content AS "resultContent",
		a.level AS "level",
		a.type AS
		"type",
		a.name AS "name",
		a.leader AS "leader",
		a.number AS "number",
		a.introduction AS "introduction",
		a.apply_time AS "applyTime",
		a.innovation AS "innovation",
		a.budget AS "budget",
		a.mid_count AS
		"midCount",
		a.mid_result AS "midResult",
		a.mid_score AS "midScore",
		a.final_score AS "finalScore",
		a.reply_score AS "replyScore",
		a.final_result AS "finalResult",
		a.development AS "development",
		a.source AS "source",
		a.status AS "status",
		a.update_date AS
		"updateDate",
		a.update_by AS "updateBy.id",
		a.create_date AS
		"createDate",
		a.create_by AS "createBy.id",
		a.del_flag AS "delFlag",
		a.proc_ins_id AS "procInsId",
		a.team_id AS "teamId",
		a.template_id AS "templateId",
		a.finance_grant AS "financeGrant",
		a.university_grant AS "universityGrant",
		a.total_grant AS "totalGrant",
		a.province AS "province",
		a.university_code AS "universityCode",
		a.university_name AS "universityName",
		a.approval_date AS "approvalDate"
	</sql>

	<!-- 项目组成员 addBy 张正 -->
	<sql id="snamesColumns">
		(SELECT GROUP_CONCAT(u.name SEPARATOR '/')
		FROM team_user_relation t
		LEFT JOIN sys_user u ON t.user_id = u.id
		AND u.user_type='1' WHERE t.`team_id`=a.team_id
		GROUP BY t.`team_id` )
	</sql>

	<!-- 指导老师 addBy 张正 -->
	<sql id="tnamesColumns">
		(SELECT GROUP_CONCAT(u.name SEPARATOR '/')
		FROM
		team_user_relation t
		LEFT JOIN sys_user u ON t.user_id = u.id
		AND
		u.user_type='2' WHERE t.`team_id`=a.team_id
		GROUP BY t.`team_id` )
	</sql>

	<!--项目类型 addBy 张正 -->
	<sql id="typeStringClolums">
		( SELECT label
		FROM sys_dict dict
		WHERE TYPE="project_type" AND dict.value=a.type)
	</sql>



	<!--项目级别 addBy 张正 -->
	<sql id="levelStringClolums">
		( SELECT label
		FROM sys_dict dict
		WHERE TYPE="project_degree"
		AND dict.value=a.level)
	</sql>

	<!--项目结果 addBy 张正 -->
	<sql id="finalResultClolums">
		( SELECT label
		FROM sys_dict dict
		WHERE TYPE="project_result" AND dict.value=a.final_result)
	</sql>

	<!--负责人 -->
	<sql id="leaderStringClolums">
		( SELECT u.name
		FROM sys_user u WHERE u.id=a.leader )
	</sql>


	<sql id="projectDeclareJoins">
	</sql>


	<select id="get" resultType="ProjectDeclare">
		SELECT
		<include refid="projectDeclareColumns" />
		FROM project_declare a
		<include refid="projectDeclareJoins" />
		WHERE a.id = #{id}
	</select>

	<!-- 传给工作流查询的参数 addBy 张正 -->
	<select id="getVars" resultType="ProjectDeclare" parameterType="java.lang.String">
		SELECT
		a.id AS id,
		a.number AS number,
		a.name AS name,
		a.type AS type,
		a.level AS level,
		<include refid="leaderStringClolums" />
		AS leaderString,
		<include refid="snamesColumns" />
		AS snames,
		<include refid="tnamesColumns" />
		AS tnames
		FROM project_declare a
		<where>
			a.del_flag = '0' and a.id = #{id}
		</where>
	</select>

	<!-- 项目查询 -->
	<select id="findList" resultType="ProjectDeclare">
		SELECT
		a.id AS id,
		a.proc_ins_id AS "procInsId",
		a.number AS number,
		a.name AS name,
		a.type AS type,
		a.status AS status,
		<include refid="typeStringClolums" />
		AS typeString,
		a.leader AS leader,
		<include refid="leaderStringClolums" />
		AS leaderString,
		<include refid="snamesColumns" />
		AS snames,
		<include refid="tnamesColumns" />
		AS tnames,
		<include refid="levelStringClolums" />
		AS levelString,
		<include refid="finalResultClolums" />
		AS finalResultString
		FROM project_declare a
		LEFT JOIN sys_user sysu ON a.leader=sysu.id
		LEFT JOIN sys_office syso ON syso.id=sysu.office_id
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
			AND a.status!='0'
			${sqlMap.officeMap}
			${sqlMap.levelMap}
			<if test="type != null and type != ''">
				AND a.type = #{type}
			</if>
			<if test="level != null and level != ''">
				AND a.level = #{level}
			</if>
			<if test="leaderString != null and leaderString != ''">
				AND
				<include refid="leaderStringClolums" />
				like concat('%',#{leaderString},'%')
			</if>
			<if test="startDate != null ">
				AND a.apply_time  &gt;= #{startDate}
			</if>
			<if test="endDate != null">
				AND a.apply_time &lt; #{endDate}
			</if>

			<if test="keyword != null and keyword != ''">
				AND ( a.number like concat('%',#{keyword},'%') or
				a.name like concat('%',#{keyword},'%') or
				<include refid="typeStringClolums" />
				like concat('%',#{keyword},'%') or
				<include refid="leaderStringClolums" />
				like concat('%',#{keyword},'%') or
				<include refid="snamesColumns" />
				like concat('%',#{keyword},'%') or
				<include refid="tnamesColumns" />
				like concat('%',#{keyword},'%') or
				<include refid="levelStringClolums" />
				like concat('%',#{keyword},'%') or
				<include refid="finalResultClolums" />
				like concat('%',#{keyword},'%')
				)
			</if>
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''  ">
				ORDER BY   CONVERT(${page.orderBy} using GBK)  ${page.orderByType}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>

	<!--根据userId 找到其对应的项目 -->
    <select id="getExpsByUserId" parameterType="java.lang.String" resultType="com.oseasy.initiate.modules.project.vo.ProjectExpVo">
		 SELECT *  FROM (   SELECT  a.id  AS id , a.create_date AS "startDate" ,
		a.update_date AS "endDate" ,
		a.name  AS "name",
	        (CASE WHEN #{userId}=a.leader THEN '负责人'
			ELSE
			(CASE WHEN
				FIND_IN_SET(#{userId},(SELECT GROUP_CONCAT(t.user_id  SEPARATOR ',' ) FROM team_user_relation t WHERE t.team_id=a.team_id ))
			 THEN '组成员'
			 ELSE ''
			 END)
		END)  AS "roleName",
		( SELECT label FROM sys_dict dict
		   WHERE TYPE="project_degree" AND dict.value=a.level) AS "level",
		( SELECT label FROM sys_dict dict
		WHERE TYPE="project_result" AND dict.value=a.final_result)  AS "result"
	   FROM project_declare a
	   WHERE a.status = '9' and a.del_flag='0' ) vi WHERE vi.roleName!="" ORDER BY `level` ASC,startDate DESC
	</select>



	<select id="findAllList" resultType="ProjectDeclare">
		SELECT
		<include refid="projectDeclareColumns" />
		FROM project_declare a
		<include refid="projectDeclareJoins" />
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>
	
	<select id="getCurProjectInfoByLeader" resultType="ProjectDeclare">
		SELECT
		<include refid="projectDeclareColumns" />
		FROM project_declare a
		<include refid="projectDeclareJoins" />
		WHERE a.leader = #{leader}
		and a.del_flag = '0'
		ORDER BY a.update_date DESC
	</select>

	<insert id="insert">
		INSERT INTO project_declare(
		id,
		org_id,
		plan_content,
		plan_start_date,
		plan_end_date,
		plan_step,
		result_type,
		result_content,
		level,
		type,
		name,
		leader,
		number,
		introduction,
		apply_time,
		innovation,
		budget,
		mid_result,
		mid_score,
		final_score,
		final_result,
		development,
		source,
		status,
		update_date,
		update_by,
		create_date,
		create_by,
		del_flag,
		proc_ins_id,
		team_id,
		template_id,
		finance_grant,
		university_grant,
		total_grant,
		province,
		university_code,
		university_name,
		approval_date
		) VALUES (
		#{id},
		#{orgId},
		#{planContent},
		#{planStartDate},
		#{planEndDate},
		#{planStep},
		#{resultType},
		#{resultContent},
		#{level},
		#{type},
		#{name},
		#{leader},
		#{number},
		#{introduction},
		#{applyTime},
		#{innovation},
		#{budget},
		#{midResult},
		#{midScore},
		#{finalScore},
		#{finalResult},
		#{development},
		#{source},
		#{status},
		#{updateDate},
		#{updateBy.id},
		#{createDate},
		#{createBy.id},
		#{delFlag},
		#{procInsId},
		#{teamId},
		#{templateId},
		#{financeGrant},
		#{universityGrant},
		#{totalGrant},
		#{province},
		#{universityCode},
		#{universityName},
		#{approvalDate}
		)
	</insert>

	<update id="update">
		UPDATE project_declare SET
		org_id = #{orgId},
		plan_content = #{planContent},
		plan_start_date = #{planStartDate},
		plan_end_date = #{planEndDate},
		plan_step = #{planStep},
		result_type = #{resultType},
		result_content = #{resultContent},
		level = #{level},
		type = #{type},
		name = #{name},
		leader = #{leader},
		number = #{number},
		introduction = #{introduction},
		apply_time = #{applyTime},
		innovation = #{innovation},
		budget = #{budget},
		mid_result = #{midResult},
		mid_score = #{midScore},
		final_score = #{finalScore},
		final_result = #{finalResult},
		development = #{development},
		source = #{source},
		status = #{status},
		update_date = #{updateDate},
		update_by = #{updateBy.id},
		proc_ins_id = #{procInsId},
		team_id = #{teamId},
		template_id = #{templateId},
		finance_grant = #{financeGrant},
		university_grant = #{universityGrant},
		total_grant = #{totalGrant},
		province = #{province},
		university_code = #{universityCode},
		university_name = #{universityName},
		approval_date =#{approvalDate}
		WHERE id = #{id}
	</update>

	<update id="updateStatus">
		UPDATE project_declare SET
		status = #{status},
		final_result = #{finalResult},
		mid_result = #{midResult},
		reply_Score = #{replyScore},
		level = #{level},
		<if test="approvalDate != null ">
			approval_date = #{approvalDate},
		</if>
		update_date = #{updateDate},
		update_by = #{updateBy.id}
		WHERE id = #{id}
	</update>


	<update id="updateNumber">
		UPDATE project_declare SET
		number = #{number}
		WHERE id
		= #{id}
	</update>


	<update id="updateMidCount">
		UPDATE project_declare SET
		mid_count
		= #{midCount}
		WHERE id = #{id}
	</update>

	<update id="updateMidScore">
		UPDATE project_declare SET
		mid_score
		= #{midScore}
		WHERE id = #{id}
	</update>

	<update id="updateFinalScore">
		UPDATE project_declare SET
		final_score = #{finalScore}
		WHERE id = #{id}
	</update>

	<update id="updateFinalResult">
		UPDATE project_declare SET
		<if test="number!=null || number!=''">
			number = #{number},
		</if>
		<if test="midScore!=null || midScore!=''">
			mid_score = #{midScore},
		</if>
		<if test="finalScore!=null || finalScore!=''">
			final_score = #{finalScore},
		</if>
		level = #{level},
		final_result = #{finalResult},
		status = #{status}
		WHERE id = #{id}
	</update>


	<update id="delete">
		UPDATE project_declare SET
		del_flag = #{DEL_FLAG_DELETE},number=null
		WHERE id = #{id}
	</update>
	<select id="findTeams" resultType="com.oseasy.initiate.modules.team.entity.Team"
		parameterType="java.lang.String">
		<if test="teamid != null and teamid != '' ">
			select t.* from team t where t.id=#{teamid}
			union
		</if>
		SELECT
		t.*
		FROM team t
		WHERE t.sponsor = #{userid} and t.del_flag='0' and
		t.state='1' 
		and not EXISTS(select 1 from project_declare p where p.del_flag='0' and p.team_id=t.id)
		and not EXISTS(select 1 from g_contest p where p.del_flag='0' and p.team_id=t.id)
	</select>
	<select id="findTeamStudent" resultType="java.util.HashMap"
		parameterType="java.lang.String">
		select u.name,u.no,o.name org_name
		,op.name professional,(select GROUP_CONCAT(s6.label)  from sys_dict s6 where FIND_IN_SET(s6.value,u.domain) and s6.type='technology_field') domain,u.mobile,s1.label instudy,t.user_type
		from team_user_relation t
		left join sys_user u on t.user_id=u.id
		left join sys_office o on u.office_id=o.id
		left join sys_office op on u.professional=op.id
		left join sys_student_expansion ss on u.id=ss.user_id
		left join sys_dict s1 on ss.instudy=s1.value and s1.type='degree_type'
		where t.user_type='1' and t.team_id=#{id} and t.del_flag='0' and (t.state='0' or  t.state='4')
	</select>
		<select id="findTeamTeacher" resultType="java.util.HashMap"
		parameterType="java.lang.String">
		select u.name,ifnull(st.work_unit,o.name)
		org_name,st.technical_title,
		(select GROUP_CONCAT(s6.label) from sys_dict s6 where
		FIND_IN_SET(s6.value,u.domain) and s6.type='technology_field') domain,
		u.mobile,u.email,t.user_type,
		(select GROUP_CONCAT(s1.label) from sys_dict s1 where
		FIND_IN_SET(s1.value,st.teacherType) and s1.type='master_type')
		teacherType,
		st.teacherType ttv
		from team_user_relation t
		left join sys_user u on
		t.user_id=u.id
		left join sys_office o on u.office_id=o.id
		left join
		sys_teacher_expansion st on u.id=st.user_id
		where t.user_type='2' and t.team_id=#{id} and t.del_flag='0' and (t.state='0' or  t.state='4')
	</select>
	<select id="getMyProjectList" resultType="java.util.HashMap"
		parameterType="java.util.Map">
		select distinct t.id,t.number,t.name
		project_name,s1.label type,s2.label level,u.name
		leader,date_format(t.apply_time,'%Y-%m-%d %H:%i:%s') apply_time,
		t.status,t.final_result,t.proc_ins_id,t.status
		status_code,t.leader create_by,t.create_date
		from project_declare t left join team_user_relation r on
		t.team_id=r.team_id
		left join sys_dict s1 on t.type=s1.value and s1.type='project_type'
		left join sys_dict s2 on t.level=s2.value and s2.type='project_degree'
		left join sys_user u on t.leader=u.id
		where t.del_flag='0' and (t.leader=#{userid}
		or r.user_id=#{userid} ) order by t.create_date desc limit
		#{offset},#{pageSize}
	</select>
	<select id="getMyProjectListCount" resultType="java.lang.Integer"
		parameterType="java.util.Map">
		select count(distinct t.id)
		from project_declare t left join team_user_relation r on
		t.team_id=r.team_id
		where t.del_flag='0' and (t.leader=#{userid}
		or r.user_id=#{userid} )
	</select>
	<select id="getMyProjectListPerson" resultType="java.util.HashMap"
		parameterType="java.util.Map">
		SELECT p.id,
		GROUP_CONCAT(u.name SEPARATOR '/') pname,
		t.user_type team_user_type
		FROM project_declare p
		left join team_user_relation t on p.team_id=t.team_id
		LEFT JOIN sys_user u ON t.user_id = u.id
		where
		<foreach collection="list" item="proid" index="index" open="("
			close=")" separator=" or ">
			p.id=#{proid}
		</foreach>
		group by p.id,t.user_type
	</select>
	<select id="getProjectAuditResult" resultType="java.util.HashMap"
		parameterType="java.lang.String">
		select s2.label level,t.mid_result,t.final_result from project_declare t
		left join sys_dict s2 on t.level=s2.value and s2.type='project_degree'
		where t.id=#{projectId}
	</select>
	<select id="getProjectAuditInfo" resultType="java.util.HashMap"
		parameterType="java.lang.String">
		SELECT
		a.audit_step,a.suggest,date_format(a.create_date,'%Y-%m-%d %H:%i:%s')
		create_date
		FROM project_audit_info a
		WHERE a.project_id = #{projectId}
		AND a.del_flag = '0'
	</select>
	<select id="getValidProjectAnnounce" resultType="java.util.HashMap">
		select t.id,date_format(t.begin_date,'%Y-%m-%d')
		begin_date,date_format(t.end_date,'%Y-%m-%d')
		end_date,date_format(t.p_init_start,'%Y-%m-%d')
		p_init_start,date_format(t.p_init_end,'%Y-%m-%d') p_init_end
		,date_format(t.mid_start_date,'%Y-%m-%d')
		mid_start_date,date_format(t.mid_end_date,'%Y-%m-%d') mid_end_date,
		date_format(t.final_start_date,'%Y-%m-%d')
		final_start_date,date_format(t.final_end_date,'%Y-%m-%d')
		final_end_date
		from project_announce t where t.del_flag='0' and t.project_state='1' and   pro_type='1' and
		t.begin_date &lt;=SYSDATE() and t.end_date &gt;=SYSDATE()
	</select>
	<select id="getProjectAnnounceByid" resultType="java.util.HashMap"
		parameterType="java.lang.String">
		select t.id,date_format(t.begin_date,'%Y-%m-%d')
		begin_date,date_format(t.end_date,'%Y-%m-%d')
		end_date,date_format(t.p_init_start,'%Y-%m-%d')
		p_init_start,date_format(t.p_init_end,'%Y-%m-%d') p_init_end
		,date_format(t.mid_start_date,'%Y-%m-%d')
		mid_start_date,date_format(t.mid_end_date,'%Y-%m-%d') mid_end_date,
		date_format(t.final_start_date,'%Y-%m-%d')
		final_start_date,date_format(t.final_end_date,'%Y-%m-%d')
		final_end_date
		from project_announce t where t.id=#{id}
	</select>
	<select id="getCurProjectInfo" resultType="java.util.HashMap"
		parameterType="java.lang.String">
		select t.id,t.status,t.name,t.number from
		project_declare t where t.del_flag='0' and t.status!='8' and
		t.status!='9' and t.leader=#{uid}
	</select>
	<select id="getCurProjectInfoByTeam" resultType="java.util.HashMap"
		parameterType="java.lang.String">
		select t.id,t.status,t.name,t.number from
		project_declare t where t.del_flag='0' and t.status!='8' and
		t.status!='9' and t.team_id=#{tid}
	</select>

	<select id="getLastProjectInfo" resultType="java.util.HashMap"
		parameterType="java.lang.String">
		SELECT distinct
		t.id,
		t. status,
		t. name,
		t.number,
		t.template_id,
		t.leader create_by,
		t.level,
		date_format(t.approval_date,'%Y-%m-%d') approval_date,
		s1.label level_str,
		t.create_date,
		u.name leader,
		date_format(t.apply_time,'%Y-%m-%d %H:%i:%s') apply_time
		FROM
		project_declare t left join team_user_relation r on t.team_id=r.team_id
		left join
		sys_user u on t.leader=u.id
		left join sys_dict s1 on t.level=s1.value and s1.type='project_degree'
		WHERE
		t.del_flag = '0'
		AND (t.leader = #{uid} or r.user_id=#{uid})
		order by
		t.create_date desc limit 1
	</select>

	<select id="getProjectByName" resultType="java.lang.Integer"
		parameterType="java.util.Map">
		select count(1)
		from project_declare t
		where t.del_flag='0' and t.leader=#{cby} and t.name=#{name}
		<if test="id != null and id!= '' ">
			and t.id!=#{id}
		</if>
	</select>

	<select id="getProjectByTeamId" resultType="ProjectDeclare">
		select p.name 
		from project_declare p 
		where p.del_flag='0' and p.team_id=#{tid} and status in (0,1,2,3,4,5,6,7)
		
	</select>

	
	<select id="findByTeamId" resultType="java.lang.Integer">
	   SELECT COUNT(1) 
	   FROM project_declare pd 
	   LEFT JOIN team t ON pd.team_id=t.id 
	   WHERE pd.status BETWEEN '0' AND '7' AND pd.team_id=#{teamId} AND pd.del_flag='0'
	</select>
	<select id="getProjectByCdn" resultType="ProjectDeclare">
		select p.* 
		from project_declare p 
		where p.del_flag='0'  
		<if test="num != null and num !='' ">
			and p.number=#{num}
		</if>
		<if test="name != null and name != '' ">
			and p.name=#{name}
		</if>
		<if test="uid != null and uid != '' ">
			and p.leader=#{uid}
		</if>
	</select>
</mapper>